Happens-Before原则
         说了这么多，发现可以使用volatile和synchronized关键字进行同步。但是，你不会无缘无故就使用它们，存在竞争、线程安全问题的时候才应该考虑使用，但是如何判断是否存在这些问题呢？下面介绍java内存模型中的一个重点原则――先行发生原则（Happens-Before），使用这个原则作为依据，来指导你判断是否存在线程安全和竞争问题。

l  程序顺序规则：在程序中，如果A操作在B操作之前（比如A代码在B代码上面，或者由A程序调用B程序），那么在这个线程中，A操作将在B操作之前执行。

l  管理锁定规则：一个unlock操作先于后面对同一个锁的lock操作之前执行。

l  Volatile变量规则：对一个volatile变量的写操作必须在对该变量的读操作之前发生。

l  线程启动规则：线程的Thread.start必须在该线程所有其他操作之前发生

l  线程终止规则：线程中所有操作都先行发生于该线程的终止检测。可以通过Thread.join()方法结束、Thread.isAlive()的返回值判断线程是否终止。

l  线程中断规则：对线程interrupt()方法的调用必须在被中断线程的代码检测到interrupt调用之前执行。

l  对象终结规则：对象的初始化（构造函数的调用）必须在该对象的finalize()方法完成。

l  传递性：如果A先行发生于B，B先行发生于C，那么A先行发生于C。

这些操作是无需使用任何同步手段就能保证成立的先行发生规则。如果要线程A、B，需要B能看到A操作的结果（无论两者是否在一个线程当中），需要A、B满足Happens-Before关系，如果两个操作不存在Happens-Before关系，JVM会对他们进行任意重排序。当A和B在同一个线程中，或者两个线程使用同样的锁，他们就能满足Happens-Before，如果使用不同锁，就不满足。